import pandas as pd

SAMPLES = pd.read_csv("list_of_samples.txt", header=None, squeeze=True).tolist()

FASTQ_DIR = "/Genomics/ayroleslab2/scott/git/chromium/data/acute/rna"
REF_DIR = "/Genomics/ayroleslab2/scott/git/chromium/data/ref/dmel-all-chromosome-r6.49.fasta"
STAR_INDEX_DIR = "/Genomics/ayroleslab2/scott/git/chromium/data/ref/star"
ANNOTATION_DIR = "/Genomics/ayroleslab2/scott/git/chromium/data/ref/dmel-all-r6.49.gtf"
TMP_DIR = "/Genomics/ayroleslab2/scott/git/chromium/data/snakemake_acute_rna_tmp"
RESULTS_DIR = "/Genomics/ayroleslab2/scott/git/chromium/data/snakemake_acute_rna_results"

rule all:
    input:
        expand(RESULTS_DIR + "/{sample}_aligned_dedup.bam", sample=SAMPLES),
        expand(RESULTS_DIR + "/{sample}_ReadsPerGene.out.tab", sample=SAMPLES)

rule trim:
    conda:
        "acute_rna.yml"
    input:
        r1 = FASTQ_DIR + "/2427__{sample}-read-1.fastq.gz",
        r2 = FASTQ_DIR + "/2427__{sample}-read-4.fastq.gz"
    output:
        r1_trim = TMP_DIR + "/{sample}.trim.R1.fastq.gz",
        r2_trim = TMP_DIR + "/{sample}.trim.R2.fastq.gz"
    params:
        tmp_dir = TMP_DIR
    shell:
        """
        mkdir -p {params.tmp_dir} && \
        cutadapt -e 0.1 --overlap 2 -a AGATCGGAAGAG -A AGATCGGAAGAG \
        --minimum-length=20 --trim-n -j 0 -o {output.r1_trim} \
        -p {output.r2_trim} {input.r1} {input.r2}
        """

rule star_alignment:
    conda:
        "acute_rna.yml"
    input:
        r1 = TMP_DIR + "/{sample}.trim.R1.fastq.gz",
        r2 = TMP_DIR + "/{sample}.trim.R2.fastq.gz"
    output:
        bam = RESULTS_DIR + "/{sample}_aligned_dedup.bam",
        counts = RESULTS_DIR + "/{sample}_ReadsPerGene.out.tab"
    params:
        index_dir = STAR_INDEX_DIR,
        threads = 8,
        results_dir = RESULTS_DIR
    shell:
        """
        mkdir -p {params.results_dir} && \
        STAR --runThreadN {params.threads} --genomeDir {params.index_dir} \
        --readFilesIn {input.r1} {input.r2} --readFilesCommand zcat \
        --outFileNamePrefix {TMP_DIR}/{wildcards.sample} \
        --outSAMtype BAM SortedByCoordinate \
        --outFilterScoreMinOverLread 0 --outFilterMatchNminOverLread 0 --outFilterMatchNmin 0 \
        --bamRemoveDuplicatesType UniqueIdentical \
        --quantMode GeneCounts && \
        mv {TMP_DIR}/{wildcards.sample}Aligned.sortedByCoord.out.bam {output.bam} && \
        mv {TMP_DIR}/{wildcards.sample}ReadsPerGene.out.tab {output.counts}
        """